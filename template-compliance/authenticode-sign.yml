parameters:
  - name: "buildOutputPath"
    default: "$(Build.ArtifactStagingDirectory)\\build"
  - name: "signOutputPath"
    default: "$(Build.ArtifactStagingDirectory)\\signed"
  - name: "pattern"
    default: "*.dll,*.exe"
  - name: "certificateId"
    default: "CP-230012"

steps:
- pwsh: |
    [string] $CertificateId = "${{ parameters.certificateId }}"
    Write-Verbose "CertificateId - $CertificateId" -Verbose

    [string] $VariableName = "EsrpJson"

    [string] $SigningServer = '$(SigningServer)'
    Write-Verbose "SigningServer - $SigningServer" -Verbose

    $esrpParameters = @(
    @{
        ParameterName  = "OpusName"
        ParameterValue = "Microsoft"
    }
    @{
        ParameterName  = "OpusInfo"
        ParameterValue = "http://www.microsoft.com"
    }
    @{
        ParameterName  = "PageHash"
        ParameterValue = "/NPH"
    }
    @{
        ParameterName  = "FileDigest"
        ParameterValue = "/fd sha256"
    }
    @{
        ParameterName  = "TimeStamp"
        ParameterValue = "/tr ""$SigningServer"" /td sha256"
    }
    )

    $esrp = @(@{
    keyCode = $CertificateId
    operationSetCode = "SigntoolSign"
    parameters = $esrpParameters
    toolName = "signtool.exe"
    toolVersion = "6.2.9304.0"
    })

    $vstsCommandString = "vso[task.setvariable variable=$VariableName][$($esrp | ConvertTo-Json -Compress)]"
    Write-Verbose -Message ("sending " + $vstsCommandString) -Verbose
    Write-Host "##$vstsCommandString"

    $vstsCommandString = "vso[task.setvariable variable=GDN_CODESIGN_TARGETDIRECTORY]${{ parameters.signOutputPath }}"
    Write-Verbose -Message ("sending " + $vstsCommandString) -Verbose
    Write-Host "##$vstsCommandString"
  displayName: Generate Authenticode signing JSON
  condition: and(succeeded(), eq(variables['ESRP_TEMPLATE_SHOULD_SIGN'], 'True'))
